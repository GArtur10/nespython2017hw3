#%%

#1

import numpy as np

class OLS(object):
    
    def __init__(self, X, y):
        self.X = X
        self.y = y
        beta = (np.linalg.inv((X.T) @ X )) @ X.T @ y
        self.beta = beta
        self.sigma = 1/(X.shape[0]-X.shape[1]) * (y - X @ beta).T @ (y - X @ beta)
        self.XTX = np.linalg.inv(X.T @ X)
        self.V = self.sigma * self.XTX
        
    def predict(self, x):
        y_future = x.T @ self.beta
        V_future = self.sigma*(1 + x.T @ self.XTX @ x)
        return (y_future,V_future)      

# входные данные для проверки
        
X = np.random.randn(100,3)
y = X.dot(np.array([1,2,3]))+np.random.randn(100)     
x = np.array([1,0,1])

model = OLS(X,y)
model.beta
model.V
model.predict(np.array([1,0,1]))


#%%
n = 200
k = 11

#2.1
b = np.random.uniform(0,1,k)  

#2.2      
x = np.random.uniform(-5,5,n)  
x = np.sort(x, axis=None) 

#2.3
u = np.random.normal(0, 10, n)

#2.4
# defining factorial function
def fact(n):
    f = 1
    for i in range(1, n+1):
        f = f*i
    return f   

# generating y
y = np.array([])
for i in range (n):
    y_new = 0 
    for j in range (k):
        y_new = b[j] * (x[i]**j)/fact(j) + y_new
    
    y = np.append(y,[y_new + u[i]],axis = 0)    

#2.5
import matplotlib 
import matplotlib.pylab as plt

fig1 = plt.figure()
plt.plot(x, y, 'o')
plt.ylabel(r'$y_i$')
plt.xlabel(r'$x_i$')
plt.show()
fig1.savefig('last1.pdf')
#%%
# Способ 1
poly = np.poly1d(np.polyfit(x, y, 1))
y_hat1 = poly(x)

poly = np.poly1d(np.polyfit(x, y, 2))
y_hat2 = poly(x)

poly = np.poly1d(np.polyfit(x, y, 3))
y_hat3 = poly(x)

poly = np.poly1d(np.polyfit(x, y, 4))
y_hat4 = poly(x)

fig = plt.figure()
matplotlib.rc('font', family='serif')
plt.plot(x, y, 'o')
plt.plot(x, y_hat1, label=r'$K = 1$',color='darkblue')
plt.plot(x, y_hat2, label=r'$K = 2$')
plt.plot(x, y_hat3, label=r'$K = 3$')
plt.plot(x, y_hat4, label=r'$K = 4$', color='darkred')
plt.ylabel(r'$y_i$')
plt.xlabel(r'$x_i$')
plt.legend(loc='best')
plt.show()
fig.savefig('last2.pdf')

matplotlib.rc('font', family='serif')
import matplotlib.font_manager
set([f.name for f in matplotlib.font_manager.fontManager.afmlist])
set([f.name for f in matplotlib.font_manager.fontManager.ttflist]) 

#%%
# Способ 2 (вручную, используем класс OLS для оценки модели 
# и вычисления предсказанных значений)

# k=1

# расширение матрицы иксов (добавляем единичный элемент для бета ноль)
x1 = x.reshape(n,1)
z = np.ones((x1.shape[0],1))
x1 = np.append(z, x1, axis=1)

# оценка модели
model1 = OLS(x1,y)
print(model1.beta)

#считаем предсказанные значения у
y_future1 = np.array([])
for i in range(n):
    y_new = model1.predict(x1[i])[0]
    y_future1 = np.append(y_future1,[y_new],axis = 0)  

# k=2

# расширение матрицы иксов (добавляем x^2)
x_reshaped = x.reshape(n,1)
x2 = x_reshaped**2
x2 = np.append(x1,x2,axis=1)

# оценка модели
model2 = OLS(x2,y)
print(model2.beta)

#считаем предсказанные значения у
y_future2 = np.array([])
for i in range(n):
    y_new = model2.predict(x2[i])[0]
    y_future2 = np.append(y_future2,[y_new],axis = 0)
 
# k=3

# расширение матрицы иксов (добавляем x^3)
x3 = x_reshaped**3
x3 = np.append(x2,x3,axis=1)

# оценка модели
model3 = OLS(x3,y)
print(model3.beta)

#считаем предсказанные значения у
y_future3 = np.array([])
for i in range(n):
    y_new = model3.predict(x3[i])[0]
    y_future3 = np.append(y_future3,[y_new],axis = 0) 

# k=4

# расширение матрицы иксов (добавляем x^4)
x4 = x_reshaped**4
x4 = np.append(x3,x4,axis=1)

# оценка модели
model4 = OLS(x4,y)
print(model4.beta)

#считаем предсказанные значения у
y_future4 = np.array([])
for i in range(n):
    y_new = model4.predict(x4[i])[0]
    y_future4 = np.append(y_future4,[y_new],axis = 0)
    
#считаем дисперсии
V_4 = np.array([])
for i in range(n):
    V = model4.predict(x4[i])[1]
    V_4 = np.append(V_4,[V],axis = 0)
 
#общий график 
plt.plot(x, y, 'o')
plt.plot(x, y_future1, label='K = 1') 
plt.plot(x, y_future2, label='K = 2')
plt.plot(x, y_future3, label='K = 3',color='darkblue')
plt.plot(x, y_future4, label='K = 4', color='darkred')
plt.ylabel(r'$y_i$')
plt.xlabel(r'$x_i$')
plt.legend(loc='best')
plt.show()    
    
#%%
t_stat = sc.stats.t.ppf(0.95,n-2)
y_future4_upper = y_future4 + t_stat * np.sqrt(V_4)
y_future4_lower = y_future4 - t_stat * np.sqrt(V_4)

fig = plt.figure()
plt.fill_between(x,y_future4_lower,y_future4_upper,color='grey',alpha=.5)
plt.plot(x, y, 'o')
plt.plot(x, y_future4, label=r'$K = 1$',color='darkred')
plt.legend(loc='best')
plt.ylabel(r'$y_i$')
plt.xlabel(r'$x_i$')
plt.show() 
fig.savefig('last3.pdf')
#%%
#3
import scipy as sc
from scipy.stats import t

n=100
       
matrix = np.random.normal(0, 1, n**2)   
matrix = matrix.reshape(n,n)    
mean = np.mean(matrix, axis = 0)
std = np.std(matrix, axis = 0)

minus = mean - sc.stats.t.ppf(0.95,99)* std/ np.sqrt(n)
plus = mean + sc.stats.t.ppf(0.95,99)* std/ np.sqrt(n)

check = minus * plus


y = np.array([])
for i in range(n):
    y = np.append (y,[check[i,] < 0], axis = 0)

s = int(np.sum(y))


result = np.array([])
for i in range(n):
    if y[i,] != 0:
        result = np.append(result,['True'],axis = 0)
    else:
        result = np.append(result,['False'],axis = 0)
   
print(result, '\n', s)

#%%
#4
import pandas as pd

pd.set_option('float_format', '{:6.3f}'.format)
np.set_printoptions(precision=3, suppress=True)

#4.1
df = pd.read_csv('goalies-2014-2016.csv', sep = ';',header = 0)
df.iloc[:5, :6]

#4.2
max((np.absolute(df.save_percentage - df.saves/df.shots_against)))

#4.3
print(df[['games_played','goals_against','save_percentage']].mean(axis = 0))

print(df[['games_played','goals_against','save_percentage']].std(axis = 0))

#4.4 
# 1 способ
a = df[df['season']=='2016-17'][df['games_played'] > 40]
b = a[a['save_percentage'] == max(a.save_percentage)] 
print(b[['n','player','save_percentage']])

# 2 способ
с = df[df['save_percentage'] == max(df[df['season']=='2016-17'][df['games_played'] > 40].save_percentage)][df['season']=='2016-17']
print(с[['n','player','save_percentage']])

#4.5
# (для себя) df1 =df.groupby('season')['saves'].max()
idx = df.groupby(['season'])['saves'].transform(max) == df['saves']
df1 = df[idx]
print(df1[['season','player','saves']])

#4.6 Найдите всех вратарей, которые в каждом из трех сезонов выигрывали 
# не менее 30 матчей (wins). (у Сергея на 1 меньше, так как он не брал =30)
a = df[df['season']=='2016-17'][df['wins'] >= 30][['player','wins']]
b = df[df['season']=='2015-16'][df['wins'] >= 30][['player','wins']]
c = df[df['season']=='2014-15'][df['wins'] >= 30][['player','wins']]

results = (set(a.player).intersection(set(b.player))).intersection(set(c.player))
print(list(results))

 
        